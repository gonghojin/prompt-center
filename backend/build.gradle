plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'checkstyle'
    id 'jacoco'
    id 'org.flywaydb.flyway' version '9.22.3'
}

group = 'com.gongdel'
version = '0.1.0'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    springdocVersion = '2.3.0'
    jjwtVersion = '0.11.5'
    mapstructVersion = '1.5.5.Final'
    lombokVersion = '1.18.30'
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Database
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    // Security
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

    // API Documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    // Utilities
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // 롬복이 테스트에서도 동작하도록 설정
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'

    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'javax.validation:validation-api:2.0.1.Final'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.withType(JavaCompile) {
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring',
            '-parameters'
    ]
}

checkstyle {
    toolVersion = '10.14.0'
    configFile = file("${projectDir}/config/checkstyle/checkstyle.xml")
    maxWarnings = 100
    ignoreFailures = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
    }
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }
            excludes = [
                    'com.gongdel.promptserver.PromptServerApplication',
                    'com.gongdel.promptserver.config.*'
            ]
        }
    }
}

tasks.named('check') {
    dependsOn jacocoTestReport, jacocoTestCoverageVerification
}

// 개별 클래스별 커버리지 리포트 생성
tasks.register('jacocoDetailedReport') {
    dependsOn jacocoTestReport
    doLast {
        def coverageData = []
        def jacocoReportDir = new File("${buildDir}/reports/jacoco/test/html")

        if (jacocoReportDir.exists()) {
            println "\n코드 커버리지 분석 결과:"
            println "=" * 80
            println "| %-40s | %-10s | %-10s | %-10s |".format("클래스", "라인", "브랜치", "복잡도")
            println "=" * 80

            def indexFile = new File(jacocoReportDir, "index.html")
            if (indexFile.exists()) {
                def html = indexFile.text
                def pattern = /<tr>.*?<td class=".*?">(.*?)<\/td>.*?<td class=".*?">(.*?)<\/td>.*?<td class=".*?">(.*?)<\/td>.*?<td class=".*?">(.*?)<\/td>.*?<\/tr>/
                def matcher = (html =~ pattern)

                matcher.each { match ->
                    def packageOrClass = match[1].replaceAll(/<.*?>/, "").trim()
                    if (!packageOrClass.contains("Total")) {
                        def linesCoverage = match[2].replaceAll(/<.*?>/, "").trim()
                        def branchCoverage = match[3].replaceAll(/<.*?>/, "").trim()
                        def complexityCoverage = match[4].replaceAll(/<.*?>/, "").trim()

                        println "| %-40s | %-10s | %-10s | %-10s |".format(
                                packageOrClass, linesCoverage, branchCoverage, complexityCoverage)
                    }
                }
            }
            println "=" * 80
            println "\n전체 리포트 위치: ${jacocoReportDir.absolutePath}\n"
        } else {
            println "JaCoCo 리포트가 생성되지 않았습니다. 먼저 테스트를 실행해주세요."
        }
    }
}

// QueryDSL 설정
def querydslDir = "$buildDir/generated/querydsl"


sourceSets {
    main {
        java {
            srcDirs += querydslDir
        }
    }
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}
