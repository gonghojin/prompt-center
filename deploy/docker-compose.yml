version: '3.8'

services:
  # Nginx 리버스 프록시
  nginx:
    image: nginx:1.25-alpine
    container_name: prompth-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/conf.d/locations.inc:/etc/nginx/conf.d/locations.inc:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
      - frontend
    networks:
      - prompth-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "nginx", "-t" ]
      interval: 30s
      timeout: 5s
      retries: 3

  # 프론트엔드 서비스 (Next.js)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.production
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_API_URL=/api
        - NEXT_PUBLIC_APP_NAME=${APP_NAME:-Prompth Center}
        - NEXT_PUBLIC_APP_VERSION=${APP_VERSION:-1.0.0}
        - NEXT_PUBLIC_SECURE_COOKIE=${SECURE_COOKIE:-true}
    container_name: prompth-frontend
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_PUBLIC_API_URL=/api
      - NEXT_PUBLIC_APP_NAME=${APP_NAME:-Prompth Center}
      - NEXT_PUBLIC_APP_VERSION=${APP_VERSION:-1.0.0}
      - NEXT_PUBLIC_FRONTEND_URL=${FRONTEND_URL:-http://localhost}
      - NEXT_PUBLIC_BACKEND_INTEGRATED=true
      - NEXT_PUBLIC_SECURE_COOKIE=${SECURE_COOKIE:-true}
      - TZ=Asia/Seoul
    volumes:
      - ./logs/frontend:/app/logs
    networks:
      - prompth-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Spring Boot 애플리케이션
  app:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: prompth-app
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD}
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - JWT_SECRET=${JWT_SECRET}
      - SERVER_PORT=8080
      - TZ=Asia/Seoul
    volumes:
      - ./logs/app:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    networks:
      - prompth-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: prompth-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - TZ=Asia/Seoul
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - prompth-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: prompth-redis
    command: >
      sh -c "
      if [ -n \"$$REDIS_PASSWORD\" ]; then
        redis-server --requirepass \"$$REDIS_PASSWORD\" --appendonly yes
      else
        redis-server --appendonly yes
      fi
      "
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./backups:/backups
    networks:
      - prompth-network
    restart: unless-stopped
    healthcheck:
      test: >
        sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-cli -a \"$$REDIS_PASSWORD\" ping
        else
          redis-cli ping
        fi
        "
      interval: 10s
      timeout: 3s
      retries: 5

  # Elasticsearch 검색 엔진
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: prompth-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TZ=Asia/Seoul
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - prompth-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  prompth-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
